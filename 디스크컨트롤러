import java.util.PriorityQueue;
import java.util.List;
import java.util.ArrayList;

public class Job implements Comparable<Job>{
    int start;
    int workTime;
    
    public Job(int start , int workTime)
    {
        this.start = start;
        this.workTime = workTime;
    }
    @Override
    public int compareTo(Job o)
    {
        if(this.workTime < o.workTime) return -1;
        else if(this.workTime == o.workTime)
        {
            if(this.start < o.start) return -1;
            else return 1;
        }
        else return 1;
    }
    
}

class Solution {
    public int solution(int[][] jobs) {

        PriorityQueue<Job> pq = new PriorityQueue<>();
        List<Job> arr = new ArrayList<>();
        for(int i=0;i<jobs.length;i++)
            pq.add(new Job(jobs[i][0] , jobs[i][1]));
        for(int i=0;i<jobs.length;i++)
            arr.add(pq.poll());
        int time = 0, sum = 0;
        while(arr.size() > 0)
        {
            for(int i=0;i<arr.size();i++)
            {
                if(time >= arr.get(i).start)
                {
                    time += arr.get(i).workTime;
                    sum += time-arr.get(i).start;
                    arr.remove(i);
                    break;
                }
                
                if(i == arr.size()-1) time++;
            }
        }
        int answer = sum / jobs.length;
        return answer;
    }
}
